generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName String
  email String @unique
  password String
  role String @default("Student")

  student Student?
  payments Payment[]
  UserCourse UserCourse[]
}

model File {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileId String @unique
  fileName String
}

model Course {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseName String
  details Json?

  UserCourse UserCourse[]
}

model UserCourse {
  id Int @id @default(autoincrement())
  userId Int
  courseId Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Payment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId Int
  courseId Int
  month Int
  paymentAmount Float

  user User @relation(fields: [userId], references: [id])
}

model Student {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseLevel String
  address String
  gender String
  dateOfBirth String
  phoneNumber String
  userId Int @unique
  createdBy Int

  user User @relation(fields: [userId], references: [id])
  
}

model StudentRegisterToken {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  token String
  studentId Int?
  isSubmit Boolean @default(false)
  createdBy Int
}